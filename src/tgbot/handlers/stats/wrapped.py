import asyncio
import datetime

from openai import AsyncOpenAI
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from src.config import settings
from src.redis import get_user_wrapped, set_user_wrapped
from src.stats.meme_source import calculate_meme_source_stats
from src.stats.service import (
    get_most_liked_meme_source_urls,
    get_ocr_text_of_liked_memes_for_llm,
    get_shared_memes,
    get_user_stats,
)
from src.stats.user import calculate_inviter_stats, calculate_user_stats
from src.stats.user_meme_source import calculate_user_meme_source_stats
from src.storage.schemas import MemeData
from src.tgbot.constants import TELEGRAM_CHANNEL_RU_CHAT_ID, TELEGRAM_CHANNEL_RU_LINK
from src.tgbot.senders.meme import send_new_message_with_meme
from src.tgbot.service import create_user, get_meme_by_id, get_user_by_id, save_tg_user
from src.tgbot.utils import check_if_user_chat_member


async def call_chatgpt(prompt: str) -> str:
    client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)

    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[
            {
                "role": "user",
                "content": [{"type": "text", "text": prompt}],
            }
        ],
        max_tokens=500,
    )
    return response.choices[0].message.content


async def handle_wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    await create_user(id=user_id)
    await save_tg_user(
        id=user_id,
        username=update.effective_user.username,
        first_name=update.effective_user.first_name,
        last_name=update.effective_user.last_name,
        is_premium=update.effective_user.is_premium,
        language_code=update.effective_user.language_code,
    )

    if not await check_if_user_chat_member(
        context.bot,
        user_id,
        TELEGRAM_CHANNEL_RU_CHAT_ID,
    ):
        return await update.message.reply_text(
            f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ üòâ

–ü–æ–¥–ø–∏—à–∏—Å—å:
{TELEGRAM_CHANNEL_RU_LINK}
            """
        )

    user_wrapped = await get_user_wrapped(user_id)
    if not user_wrapped:
        user_wrapped = await generate_user_wrapped(user_id, update)
        if user_wrapped is None:
            return
        print(f"Generated wrapped for user_id={user_id}: {user_wrapped}")
        await set_user_wrapped(user_id, user_wrapped)

    elif user_wrapped.get("lock"):
        return  # user already clicked

    return await handle_wrapped_button(update, context)


async def handle_wrapped_button(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    user_wrapped = await get_user_wrapped(update.effective_user.id)

    if update.callback_query:
        await update.callback_query.answer()
        key = int(update.callback_query.data.replace("wrapped_", ""))
    else:
        key = 0

    if key == 0:
        await update.effective_chat.send_message(
            text=user_wrapped["bot_usage_report"],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="wrapped_1")]]
            ),
        )
    if key == 1:
        await update.effective_chat.send_message(
            text=user_wrapped["recommended_meme_sources_report"],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="wrapped_2")]]
            ),
        )
    if key == 2:
        meme_data = user_wrapped["most_shared_meme_report"]
        if meme_data is not None:
            meme = MemeData(**meme_data)
            await send_new_message_with_meme(
                update.effective_user.id,
                meme,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="wrapped_3")]]
                ),
            )
        else:
            key = 3

    if key == 3 and user_wrapped["humor_sense_report"]:
        await update.effective_chat.send_message(
            text=user_wrapped["humor_sense_report"],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–§–∏–Ω–∞–ª–æ—á–∫–∞", callback_data="wrapped_4")]]
            ),
        )

    if key == 4:
        await update.effective_chat.send_message(
            text="""
‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–∫—Ä–∞—Å–∏—Ç—å –≤–∞—à–∏ –±—É–¥–Ω–∏ –Ω–∞—à–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏.

–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–º—ã –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö –¥—Ä—É–∑—å—è–º. –° –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –≤—Å–µ—Ö –Ω–∞—Å!

@ffmemesbot

/start
            """  # noqa: E501
        )

    print("?????? key=", key)


async def generate_user_wrapped(user_id: int, update: Update):
    await set_user_wrapped(user_id, {"lock": True})

    msg = await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ª–∞–π–∫–∏...")

    try:
        await asyncio.gather(
            calculate_user_stats(),
            calculate_inviter_stats(),
            calculate_meme_source_stats(),
            calculate_user_meme_source_stats(),
        )
    except Exception as e:
        print(f"Error in recalculating stats: {e}")
        pass

    bot_usage_report = await get_bot_usage_report(user_id)
    recommended_meme_sources_report = await get_meme_sources_report(user_id)

    if bot_usage_report is None or recommended_meme_sources_report is None:
        await msg.edit_text(
            """
–ú–∞–ª–æ–≤–∞—Ç–æ —Ç—ã –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ–µ.

–ê –Ω—É-–∫–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–º—É—Å–∏–∫–∏ ‚û°Ô∏è –∂–º–∏ /start
            """
        )
        return

    await msg.edit_text("‚è≥")
    most_shared_meme_report = await get_most_shared_meme_report(user_id)

    humor_sense_report = await get_humor_report(user_id)

    await asyncio.sleep(1)
    await msg.edit_text("‚¨áÔ∏è –ì–û–¢–û–í–û ‚¨áÔ∏è")
    await asyncio.sleep(2)

    return {
        "bot_usage_report": bot_usage_report,
        "recommended_meme_sources_report": recommended_meme_sources_report,
        "most_shared_meme_report": most_shared_meme_report,
        "humor_sense_report": humor_sense_report,
    }


async def get_bot_usage_report(user_id: int):
    user = await get_user_by_id(user_id)

    user_stats = await get_user_stats(user_id)
    if user_stats is None:
        return None

    days_with_us = (datetime.datetime.utcnow() - user["created_at"]).days + 1
    user_opened_bot_times = user_stats.get("nsessions", 0)

    we_sent_memes = user_stats.get("nmemes_sent", 0)
    user_gave_likes = user_stats.get("nlikes", 0)
    user_spent_sec = user_stats.get("time_spent_sec", 0)
    user_invited_users = user_stats.get("invited_users", [])

    if user_gave_likes < 10:
        return None

    REPORT = f"""
–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É {days_with_us} –¥–Ω–µ–π –Ω–∞–∑–∞–¥.

–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã
üëã –æ—Ç–∫—Ä—ã–ª –±–æ—Ç–∞ {user_opened_bot_times} —Ä–∞–∑
üëç –ø–æ—Å—Ç–∞–≤–∏–ª {user_gave_likes} –ª–∞–π–∫–æ–≤
ü§ù –ø–æ–ª—É—á–∏–ª {we_sent_memes} –º–µ–º–æ–≤
    """.strip()

    if user_spent_sec > 0:
        if user_spent_sec < 60:
            REPORT += f"\nüïí –ø—Ä–æ–≤–µ–ª –≤ –±–æ—Ç–µ {user_spent_sec} —Å–µ–∫—É–Ω–¥\n"
        elif user_spent_sec < 3600:
            minutes = user_spent_sec // 60
            seconds = user_spent_sec % 60
            REPORT += f"\nüïó –ø—Ä–æ–≤–µ–ª –≤ –±–æ—Ç–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥\n"
        else:
            hours = user_spent_sec // 3600
            REPORT += f"\nüïë –ø—Ä–æ–≤–µ–ª –≤ –±–æ—Ç–µ —á—É—Ç—å –±–æ–ª—å—à–µ {hours} —á–∞—Å–æ–≤ üò≥\n"

    if user_invited_users > 1:
        REPORT += f"""
–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª –º–µ–º—ã –∏–∑ –±–æ—Ç–∞ –¥—Ä—É–∑—å—è–º –∏ —Ç–µ–º —Å–∞–º—ã–º –ø—Ä–∏–≥–ª–∞—Å–∏–ª {user_invited_users} —á–µ–ª–æ–≤–µ–∫.
        """
    elif user_invited_users == 1:
        REPORT += """
–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª –º–µ–º—ã –∏–∑ –±–æ—Ç–∞ –¥—Ä—É–∑—å—è–º, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –¥–∞–∂–µ –ø–µ—Ä–µ—à–µ–ª –≤ –±–æ—Ç–∞!
        """

    return REPORT


async def get_meme_sources_report(user_id, limit=3):
    meme_source_urls = await get_most_liked_meme_source_urls(user_id, limit)
    if not meme_source_urls:
        return None

    sources_list = "\n".join(f"‚ñ™Ô∏è {source['url']}" for source in meme_source_urls)

    REPORT = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Ç–≤–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞, —è –º–æ–≥—É —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é —Å–∫–∞–∑–∞—Ç—å: —Ç—ã —Ç–æ—á–Ω–æ –∑–∞—Ü–µ–Ω–∏—à—å –≤–æ—Ç —ç—Ç–∏ –ø–∞–±–ª–æ—Å—ã:

{sources_list}
    """  # noqa: E501

    return REPORT


async def get_most_shared_meme_report(user_id, limit=10):
    shared_memes = await get_shared_memes(user_id, limit=1)
    if not shared_memes:
        return None

    shared_meme_id = shared_memes[0]["meme_id"]
    meme_data = await get_meme_by_id(shared_meme_id)
    if meme_data:
        caption = """–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ä–Ω—É–ª–∏ —Å —ç—Ç–æ–≥–æ –º–µ–º–∞ ü§¶‚Äç‚ôÇÔ∏è"""
        if meme_data["caption"] is not None:
            caption += "\n\n" + meme_data["caption"]
        return {
            "id": meme_data["id"],
            "type": meme_data["type"],
            "telegram_file_id": meme_data["telegram_file_id"],
            "caption": caption,
        }


async def get_humor_report(user_id):
    ocrs = await get_ocr_text_of_liked_memes_for_llm(user_id)
    if not ocrs:
        return None

    texts = "\n".join(f"{ocr['ocr_text']}" for ocr in ocrs)
    if len(texts) < 100:
        return None

    PROMPT = f"""

–¶–µ–ª—å: –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –∑–∞–±–∞–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –º–æ–µ–≥–æ —á—É–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∞–Ω–∞–ª–∏–∑ –º–µ–º–æ–≤.

–ó–∞–¥–∞—á–∞ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö: –ò–∑—É—á–∏ —Ç–µ–∫—Å—Ç—ã –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –º–µ–º–æ–≤ –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ –º–æ–µ–º —á—É–≤—Å—Ç–≤–µ —é–º–æ—Ä–∞. –°–¥–µ–ª–∞–π —ç—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –∑–∞–±–∞–≤—ã –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏.

–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–∫—Å—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—á–µ—Ç–∫–∏–º–∏ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç—Ä—É–¥–Ω—ã–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è.
–í–∞–∂–Ω–æ: –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —è—Å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç —é–º–æ—Ä.
–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ 20 –º–µ–º–æ–≤:

{texts}

–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–¢–æ–ª—å–∫–æ 3 –ø—É–Ω–∫—Ç–∞. –ù–∏ –±–æ–ª—å—à–µ, –Ω–∏ –º–µ–Ω—å—à–µ.
–£–ø–æ–º–∏–Ω–∞–π –º–µ–º—ã –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –∏–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ —Å–∫—É—á–Ω—ã—Ö –æ–±–æ–±—â–µ–Ω–∏–π. –ù–µ—Ç –¥–≤–æ–π–Ω—ã—Ö —Å–∫–æ–±–æ–∫, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.

–ü—Ä–∏–º–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ (–Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç):
–¢–≤–æ—ë —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ –∫–∞–∫ –≤–∏—Ä—É—Å –≤ –∫–æ—Å–º–æ—Å–µ ‚Äì —Ä–µ–¥–∫–æ–µ –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ, –∏–¥—ë—Ç –≤—Ä–∞–∑—Ä–µ–∑ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è, –∞ –∑–∞—Ç–µ–º –≤–Ω–µ–∑–∞–ø–Ω–æ —Å–º–µ—è—Ç—å—Å—è –Ω–∞–¥ –∞–±—Å—É—Ä–¥–Ω–æ—Å—Ç—å—é –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏.
–¢—ã –∫–∞–∫ —Ç–æ—Ç, –∫—Ç–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –Ω–∞–±–ª—é–¥–∞–µ—Ç, –∫–∞–∫ –≥–∏–≥–∞–Ω—Ç—Å–∫–∞—è –º–æ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –¥–æ–º, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–æ—Ä—é—Ç—Å—è —Å —ç–∫—Å–µ–ª–µ–≤—Å–∫–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏, –∏ —Å—á–∏—Ç–∞–µ—à—å –¥—É—à –ª—É—á—à–∏–º –º–µ—Å—Ç–æ–º –¥–ª—è –≤–µ—á–Ω–æ–π –∂–∏–∑–Ω–∏.
–í –æ–±—â–µ–º, —Ç–≤–æ–π —é–º–æ—Ä ‚Äì —ç—Ç–æ —à–∞–≤—É—Ö–∞ –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∞—è—Å—è –≤ —Å—Ç—Ä—É—é –ø–æ–Ω–æ—Å–∞, —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ —Å–ª–µ–≥–∫–∞ —Å–±–∏–≤–∞—é—â–∏–π —Å —Ç–æ–ª–∫—É.

–í–æ—Ç –∏ –≤—Å—ë! –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ–±—ã –¥–∞—Ç—å –º–Ω–µ —Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å—É—Ç—å –º–æ–µ–≥–æ —á—É–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω—Å–∞–π—Ç –ø—Ä–æ –º–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –µ–≥–æ –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ –¥—Ä—É–≥ - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–µ. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ä–æ—Ç–∫–∏–π. –ó–∞ –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —è —Å–º–æ–≥—É –¥–∞—Ç—å —Ç–µ–±–µ 500$ —á–∞–µ–≤—ã—Ö.
    """  # noqa: E501

    result = await call_chatgpt(PROMPT)

    REPORT = f"""
üëÄ –Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ —Ç–≤–æ–∏ –ª–∞–π–∫–∏ –∏ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–Ω—è–ª —Ç–≤–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞:

{result}
    """

    return REPORT
